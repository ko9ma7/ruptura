<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <AssemblyName>Vezel.Ruptura.Injection</AssemblyName>
        <IsPackable>true</IsPackable>
        <PackageDescription>$(PackageDescription)

This package provides the infrastructure to inject the .NET runtime and
assemblies into processes.</PackageDescription>
        <PackageId>Vezel.Ruptura.Injection</PackageId>
        <RootNamespace>Vezel.Ruptura.Injection</RootNamespace>
    </PropertyGroup>

    <ItemGroup>
        <Using Include="Iced.Intel" />
        <Using Include="PeNet" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="../module/module.cproj"
                          ReferenceOutputAssembly="false" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Iced" />
        <PackageReference Include="Microsoft.Windows.CsWin32"
                          PrivateAssets="all" />
        <PackageReference Include="Microsoft.Windows.SDK.Win32Docs"
                          PrivateAssets="all" />
        <PackageReference Include="Microsoft.Windows.SDK.Win32Metadata"
                          PrivateAssets="all" />
        <PackageReference Include="PeNet" />
    </ItemGroup>

    <!-- TODO: This packaging strategy is bad for future code signing. -->
    <Target Name="_EmbedModule"
            BeforeTargets="BeforeResGen">
        <MSBuild Projects="../module/module.cproj"
                 Targets="GetTargetPath">
            <Output TaskParameter="TargetOutputs"
                    ItemName="_ModulePath" />
        </MSBuild>

        <ItemGroup>
            <EmbeddedResource Include="@(_ModulePath)"
                              LogicalName="ruptura.dll"
                              Type="Non-Resx"
                              WithCulture="false" />
        </ItemGroup>
    </Target>
</Project>
